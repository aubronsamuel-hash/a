name: CI
on:
  push:
  pull_request:
jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install
        run: |
          python -m pip install -U pip
          pip install -e backend[dev]
      - name: Create .env (defaults for CI)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "DEV_USER=${DEV_USER:-admin}" >> .env
          echo "DEV_PASSWORD=${DEV_PASSWORD:-admin123}" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Lint
        run: |
          python -m ruff check backend
          python -m mypy backend
      - name: Tests
        env:
          DEV_USER: admin
          DEV_PASSWORD: admin123
        run: |
          pytest -q --cov=backend
  windows_smoke:
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install (venv)
        shell: pwsh
        run: |
          python -m pip install -U pip
          pip install -e backend[dev]
      - name: Create .env (defaults for CI)
        shell: pwsh
        run: |
          @"
          APP_ENV=ci
          APP_LOG_LEVEL=info
          DEV_USER=$($env:DEV_USER -ne $null ? $env:DEV_USER : "admin")
          DEV_PASSWORD=$($env:DEV_PASSWORD -ne $null ? $env:DEV_PASSWORD : "admin123")
          JWT_SECRET=ci-secret
          JWT_ALGO=HS256
          JWT_TTL_SECONDS=3600
          CORS_ORIGINS=http://localhost:3000,http://localhost:5173
          DB_DSN=sqlite:///./cc.db
          "@ | Out-File -FilePath .env -Encoding ascii
      - name: Start API (bg)
        shell: pwsh
        run: |
          ./PS1/run_bg.ps1
      - name: Smoke auth (PowerShell)
        shell: pwsh
        env:
          DEV_USER: admin
          DEV_PASSWORD: admin123
        run: |
          ./PS1/smoke_auth.ps1
  compose_smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Create .env (defaults for CI)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "DEV_USER=${DEV_USER:-admin}" >> .env
          echo "DEV_PASSWORD=${DEV_PASSWORD:-admin123}" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Build and run compose (skip if docker unavailable)
        run: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker non disponible sur ce runner, on saute ce job."
            exit 0
          fi
          docker compose up -d --build
          sleep 7
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/healthz)
          echo "HTTP=$code"
          test "$code" = "200"

