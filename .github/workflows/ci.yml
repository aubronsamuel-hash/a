name: CI
on:
  push:
  pull_request:
jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix: { python-version: ["3.11"] }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e backend[dev]
      - name: Create .env (defaults for CI)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Lint
        run: |
          python -m ruff check backend
          python -m mypy backend
      - name: Tests
        env:
          ADMIN_AUTOSEED: "true"
          ADMIN_USERNAME: "admin"
          ADMIN_PASSWORD: "admin123"
        run: |
          pytest -q --cov=backend
  windows_smoke:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Assert scripts present
        shell: pwsh
        run: |
          if (-not (Test-Path "PS1/setup.ps1")) { Write-Error "PS1/setup.ps1 manquant" ; exit 1 }
          if (-not (Test-Path "PS1/run_bg.ps1")) { Write-Error "PS1/run_bg.ps1 manquant" ; exit 1 }
          if (-not (Test-Path "PS1/smoke_auth.ps1")) { Write-Error "PS1/smoke_auth.ps1 manquant" ; exit 1 }
      - name: Create .env (defaults for CI)
        shell: pwsh
        run: |
          @"
APP_ENV=ci
APP_LOG_LEVEL=info
ADMIN_AUTOSEED=true
ADMIN_USERNAME=admin
ADMIN_PASSWORD=admin123
JWT_SECRET=ci-secret
JWT_ALGO=HS256
JWT_TTL_SECONDS=3600
CORS_ORIGINS=http://localhost:3000,http://localhost:5173

DB_DSN=sqlite:///./cc.db
"@ | Out-File -FilePath .env -Encoding ascii
      - name: Initialize environment
        shell: pwsh
        run: ./PS1/setup.ps1
      - name: Start API (bg)
        shell: pwsh
        run: ./PS1/run_bg.ps1
      - name: Smoke auth (PowerShell)
        shell: pwsh
        run: ./PS1/smoke_auth.ps1
  compose_smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Create .env (defaults for CI)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Build and run compose (skip if docker unavailable)
        run: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker non disponible sur ce runner, on saute ce job."
            exit 0
          fi
          docker compose up -d --build
          sleep 7
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/healthz)
          echo "HTTP=$code"
          test "$code" = "200"
  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20", cache: "npm", cache-dependency-path: "web/package-lock.json" }
      - name: Install deps
        working-directory: web
        run: npm ci
      - name: Lint
        working-directory: web
        run: npm run lint
      - name: Test
        working-directory: web
        run: npm test
      - name: Build
        working-directory: web
        env:
          VITE_API_BASE_URL: "http://localhost:8001"
        run: npm run build
