name: CI
on:
  push:
  pull_request:
jobs:
  backend:
    runs-on: ubuntu-latest
    strategy: { matrix: { python-version: ["3.11"] } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ matrix.python-version }}, cache: "pip" }
      - name: Install backend
        run: |
          python -m pip install --upgrade pip
          pip install -e backend[dev]
      - name: Create .env (defaults for CI, SQLite)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=[http://localhost:3000,http://localhost:5173]" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Lint backend
        run: |
          python -m ruff check backend
          python -m mypy backend
      - name: Test backend (SQLite)
        env:
          ADMIN_AUTOSEED: "true"
          ADMIN_USERNAME: "admin"
          ADMIN_PASSWORD: "admin123"
        run: |
          pytest -q --cov=backend
  windows_smoke:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Assert PS1
        shell: pwsh
        run: |
          if (-not (Test-Path "PS1/setup.ps1")) { Write-Error "PS1/setup.ps1 manquant" ; exit 1 }
          if (-not (Test-Path "PS1/run_bg.ps1")) { Write-Error "PS1/run_bg.ps1 manquant" ; exit 1 }
          if (-not (Test-Path "PS1/smoke_auth.ps1")) { Write-Error "PS1/smoke_auth.ps1 manquant" ; exit 1 }
      - name: Create .env
        shell: pwsh
        run: |
          @"
APP_ENV=ci
APP_LOG_LEVEL=info
ADMIN_AUTOSEED=true
ADMIN_USERNAME=admin
ADMIN_PASSWORD=admin123
JWT_SECRET=ci-secret
JWT_ALGO=HS256
JWT_TTL_SECONDS=3600
CORS_ORIGINS=[http://localhost:3000,http://localhost:5173]
DB_DSN=sqlite:///./cc.db
"@ | Out-File -FilePath .env -Encoding ascii
      - name: Setup venv
        shell: pwsh
        run: ./PS1/setup.ps1
      - name: Start API (bg)
        shell: pwsh
        run: ./PS1/run_bg.ps1
      - name: Smoke auth (API)
        shell: pwsh
        run: ./PS1/smoke_auth.ps1
      - name: Smoke users ETag (API)
        shell: bash
        run: |
          if command -v pwsh >/dev/null 2>&1; then
            pwsh -File PS1/web_users_smoke.ps1
          elif command -v powershell >/dev/null 2>&1; then
            powershell -File PS1/web_users_smoke.ps1
          else
            bash scripts/bash/web_users_smoke.sh
          fi
  compose_smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4
      - name: Create .env (Postgres compose)
        run: |
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=[http://localhost:3000,http://localhost:5173]" >> .env
          echo "DB_DSN=postgresql+psycopg://app:app@db:5432/app" >> .env
      - name: Build and run compose (skip if docker unavailable)
        run: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker non disponible sur ce runner, on saute ce job."
            exit 0
          fi
          docker compose up -d --build
          sleep 10
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/healthz)
          echo "HTTP=$code"
          test "$code" = "200"
  postgres_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: pgdb
          POSTGRES_USER: pguser
          POSTGRES_PASSWORD: pgpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U pguser -d pgdb"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Install backend
        run: |
          python -m pip install --upgrade pip
          pip install -e backend[dev]
      - name: Alembic upgrade (Postgres)
        env:
          DB_DSN: postgresql+psycopg://pguser:pgpass@localhost:5432/pgdb
        run: |
          python -m alembic upgrade head
      - name: Run tests against Postgres
        env:
          DB_DSN: postgresql+psycopg://pguser:pgpass@localhost:5432/pgdb
          ADMIN_AUTOSEED: "true"
          ADMIN_USERNAME: "admin"
          ADMIN_PASSWORD: "admin123"
        run: |
          pytest -q -k "auth_db or users_api"
  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20", cache: "npm", cache-dependency-path: "web/package-lock.json" }
      - name: Install deps
        working-directory: web
        run: npm ci
      - name: Lint
        working-directory: web
        run: npm run lint
      - name: Test
        working-directory: web
        run: npm test
      - name: Backend (API) minimal pour smoke front
        uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Prepare API (SQLite)
        run: |
          python -m pip install --upgrade pip
          pip install -e backend[dev]
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Start API in background
        run: |
          python -m uvicorn app.main:app --app-dir backend --host 0.0.0.0 --port 8001 &
          sleep 5
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/healthz)
          echo "HTTP=$code"
          test "$code" = "200"
      - name: Front smoke (cross-OS)
        run: |
          if command -v pwsh >/dev/null 2>&1; then
            pwsh -File PS1/web_users_smoke.ps1
            pwsh -File PS1/web_test.ps1
          elif command -v powershell >/dev/null 2>&1; then
            powershell -File PS1/web_users_smoke.ps1
            powershell -File PS1/web_test.ps1
          else
            bash scripts/bash/web_users_smoke.sh
            bash scripts/bash/web_test.sh
          fi
      - name: Build
        working-directory: web
        env:
          VITE_API_BASE_URL: "http://localhost:8001"
        run: npm run build

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20", cache: "npm", cache-dependency-path: "web/package-lock.json" }
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Backend deps + .env (SQLite autoseed)
        run: |
          python -m pip install --upgrade pip
          pip install -e backend[dev]
          echo "APP_ENV=ci" >> .env
          echo "APP_LOG_LEVEL=info" >> .env
          echo "ADMIN_AUTOSEED=true" >> .env
          echo "ADMIN_USERNAME=admin" >> .env
          echo "ADMIN_PASSWORD=admin123" >> .env
          echo "JWT_SECRET=ci-secret" >> .env
          echo "JWT_ALGO=HS256" >> .env
          echo "JWT_TTL_SECONDS=3600" >> .env
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:5173" >> .env
          echo "DB_DSN=sqlite:///./cc.db" >> .env
      - name: Start API (bg)
        run: |
          python -m uvicorn app.main:app --app-dir backend --host 0.0.0.0 --port 8001 &
          sleep 5
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/healthz)
          echo "HTTP=$code"
          test "$code" = "200"
      - name: Install Playwright Chromium (strict, retries)
        working-directory: web
        run: |
          npm ci
          for i in 1 2 3; do
            npx playwright install chromium --with-deps && exit 0
            echo "Retry install Chromium ($i/3)..." >&2
            sleep 3
          done
          echo "Chromium install failed after retries" >&2
          exit 1
      - name: E2E tests
        working-directory: web
        env:
          ADMIN_PASSWORD: "admin123"
          E2E_SKIP: "0"
        run: |
          npm run build
          npx playwright test
